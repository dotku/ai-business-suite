---
interface Props {
  title: string;
  responsibilities: string[];
  technologies: string[];
  icon?: string;
}

const { title, responsibilities, technologies, icon = "robot" } = Astro.props;
---

<div class="ai-role glass-card">
  <div class="card-glow"></div>
  <div class="card-content">
    <div class="title-section">
      <i class={`fas fa-${icon} role-icon`}></i>
      <h2 class="text-gradient">{title}</h2>
    </div>
    <div class="content">
      <div class="section">
        <h3><i class="fas fa-tasks"></i> Responsibilities</h3>
        <ul>
          {responsibilities.map((item) => <li>{item}</li>)}
        </ul>
      </div>
      <div class="section">
        <h3><i class="fas fa-microchip"></i> Technologies</h3>
        <ul>
          {technologies.map((tech) => <li>{tech}</li>)}
        </ul>
      </div>
    </div>
  </div>
</div>

<style>
  .ai-role {
    padding: 2rem;
    position: relative;
    overflow: hidden;
    height: 100%;
    backdrop-filter: blur(12px);
    border: 1px solid rgba(var(--accent-light), 0.1);
  }

  .title-section {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin-bottom: 2rem;
  }

  .role-icon {
    font-size: 2rem;
    color: rgb(var(--accent-light));
    background: rgba(var(--accent-light), 0.1);
    padding: 1rem;
    border-radius: 12px;
    transition: all 0.3s ease;
  }

  .ai-role:hover .role-icon {
    transform: scale(1.1);
    background: rgba(var(--accent-light), 0.2);
  }

  .card-content {
    position: relative;
    z-index: 2;
  }

  .card-glow {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: radial-gradient(
      circle at var(--mouse-x, 50%) var(--mouse-y, 50%),
      rgba(var(--accent-light), 0.15) 0%,
      transparent 70%
    );
    opacity: 0;
    transition: opacity 0.4s ease;
    pointer-events: none;
    z-index: 1;
  }

  .ai-role:hover .card-glow {
    opacity: 1;
  }

  .ai-role::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 3px;
    background: var(--accent-gradient);
    background-size: 300%;
    animation: gradient-shift 8s linear infinite;
  }

  @keyframes gradient-shift {
    0% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
    100% { background-position: 0% 50%; }
  }

  h2 {
    font-size: clamp(1.5rem, 4vw, 2rem);
    margin: 0;
    font-weight: 800;
    letter-spacing: -0.5px;
    line-height: 1.2;
  }

  h3 {
    color: rgb(var(--accent-light));
    font-size: clamp(1rem, 3vw, 1.1rem);
    margin: 1rem 0 1rem 0;
    font-weight: 600;
    letter-spacing: -0.3px;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  h3 i {
    font-size: 0.9em;
    opacity: 0.9;
  }

  .content {
    display: grid;
    grid-template-columns: 1fr;
    gap: 1.5rem;
  }

  @media (min-width: 640px) {
    .content {
      grid-template-columns: 1fr 1fr;
    }
  }

  ul {
    list-style-type: none;
    padding: 0;
    margin: 0;
  }

  li {
    margin: 0.75rem 0;
    padding-left: 1.5rem;
    position: relative;
    line-height: 1.5;
    font-size: clamp(0.875rem, 2.5vw, 0.95rem);
    color: rgba(255, 255, 255, 0.9);
    transition: all 0.2s ease;
  }

  li:hover {
    transform: translateX(5px);
    color: rgb(var(--accent-light));
  }

  li:before {
    content: "â†’";
    position: absolute;
    left: 0;
    color: rgb(var(--accent-light));
    font-weight: 500;
    transition: transform 0.2s ease;
  }

  li:hover:before {
    transform: translateX(3px);
  }

  @media (hover: none) {
    .card-glow {
      display: none;
    }
    
    li:hover {
      transform: none;
    }
    
    li:hover:before {
      transform: none;
    }
  }

  @media (max-width: 639px) {
    .ai-role {
      padding: 1.5rem;
    }
    
    .title-section {
      margin-bottom: 1.5rem;
    }
    
    .role-icon {
      font-size: 1.5rem;
      padding: 0.75rem;
    }
  }
</style>

<script>
  const cards = document.querySelectorAll('.ai-role');
  
  if (window.matchMedia('(hover: hover)').matches) {
    cards.forEach(card => {
      card.addEventListener('mousemove', (e) => {
        const rect = card.getBoundingClientRect();
        const x = ((e.clientX - rect.left) / rect.width) * 100;
        const y = ((e.clientY - rect.top) / rect.height) * 100;
        
        card.style.setProperty('--mouse-x', `${x}%`);
        card.style.setProperty('--mouse-y', `${y}%`);
      });
    });
  }
</script>